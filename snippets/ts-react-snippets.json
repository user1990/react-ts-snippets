{
  "New custom TFC component": {
    "prefix": "tsxcomponent",
    "body": [
      "import React from 'react';",
      "",
      "type $1Props = {}",
      "",
      "const $1: React.FC = ({}: $1Props) => {",
      ""
      "  return (
      "    <>",
      "",
      "    </>",
      "  )",
      "};"
      "export default $1;"
    ],
    "description": "Create CUSTOM react functional TS component"
  },
  "Create TFC component": {
    "prefix": "tfc",
    "body": [
      "import React from 'react';",
      "",
      "type $1Props = {}",
      "",
      "export const $1 = ({}: $1Props) => (",
      "  <>",
      "    <h1>React TS FC Component</h1>",
      "    <div>List</div>",
      "  </>",
      ");"
    ],
    "description": "Create react functional TS component"
  },
  "Create TFC component with hooks": {
    "prefix": "tfch",
    "body": [
      "import React, { useEffect, useState } from 'react';",
      "",
      "type $1Props = {}",
      "",
      "export const $1 = ({}: $1Props) => {",
      "  const [state, setState] = useState();",
      "",
      "  useEffect(() => {}, []);",
      "",
      "  return (",
      "    <>",
      "      <h1>React TS FC Component</h1>",
      "      <div>List</div>",
      "    </>",
      "  );",
      "};"
    ],
    "description": "Create react functional TS component"
  },
  "Create Styled TFC component": {
    "prefix": "tfcs",
    "body": [
      "import React from 'react';",
      "import styled from 'styled-components'",
      "",
      "type $1Props = {}",
      "",
      "const StyledCard = styled.div`",
      "  display: flex;",
      "  align-items: center;",
      "  justify-content: center;",
      "`;",
      "",
      "export const $1 = ({}: $1Props) => (",
      "  <StyledCard>",
      "    <h1>React TS FC Component</h1>",
      "    <div>List</div>",
      "  </StyledCard>",
      ");"
    ],
    "description": "Create react functional styled TS component"
  },
  "Create empty Styled TFC component": {
    "prefix": "tfcse",
    "body": [
      "const $1 = styled.div`",
      "  ",
      "`;"
    ],
    "description": "Create empty react functional styled TS component"
  },
  "Print data in JSX": {
    "prefix": "jsxpr",
    "body": ["<pre>{JSON.stringify($1, null, 2)}</pre>"],
    "description": "Print JSX data"
  },
  "Map an array on JSX": {
    "prefix": "jsxmap",
    "body": [
      "{!!$1.length && $1.map(item => (",
      " <div key={item.id}></div>",
      "))}"
    ],
    "description": "Map array in jsx"
  }
}
